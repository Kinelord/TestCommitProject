module.log=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory
# Custom log printing
logMessageFormat=com.p6spy.engine.spy.appender.SingleLineFormat
# Use the log system to record SQL
appender=com.p6spy.engine.spy.appender.Slf4JLogger
## Configuration Record LOG Exception
excludecategories=info,debug,result,batc,resultset
# Setting Using P6SPY Driver to do a proxy
deregisterdrivers=true
# Date format
dateformat=yyyy-MM-dd HH:mm:ss
# Actually drive
driverlist=org.postgresql.Driver
# Whether to open a slow SQL record
outagedetection=true
# SQL record standard seconds
outagedetectioninterval=2
logfile = /srv/log/spy.log
log4j.logger.p6spy=WARNING
#
## Register P6LogFactory to log JDBC events
#decorator.datasource.p6spy.enable-logging=true
## Use com.p6spy.engine.spy.appender.MultiLineFormat instead of com.p6spy.engine.spy.appender.SingleLineFormat
#decorator.datasource.p6spy.multiline=true
## Use logging for default listeners [slf4j, sysout, file, custom]
#decorator.datasource.p6spy.logging=slf4j
## Log file to use (only with logging=file)
#decorator.datasource.p6spy.log-file=spy.log
## Class file to use (only with logging=custom). The class must implement com.p6spy.engine.spy.appender.FormattedLogger
#decorator.datasource.p6spy.custom-appender-class=my.custom.LoggerClass
## Custom log format, if specified com.p6spy.engine.spy.appender.CustomLineFormat will be used with this log format
#decorator.datasource.p6spy.log-format=
## Use regex pattern to filter log messages. If specified only matched messages will be logged.
#decorator.datasource.p6spy.log-filter.pattern=
## Report the effective sql string (with '?' replaced with real values) to tracing systems.
## NOTE this setting does not affect the logging message.
#decorator.datasource.p6spy.tracing.include-parameter-values=true